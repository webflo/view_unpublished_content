<?php
// $Id$

/**
 * @file
 * This is the file description for View Unpub module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */
 
/**
 * Implements hook_permission().
 */
function view_unpublished_content_permission() {
  $perms = array(
    'view any unpublished content' => array(
      'title' => t('View any unpublished content'),      
    ),
  );
  
  // Generate standard node permissions for all applicable node types.
  foreach (view_unpublished_content_get_configured_types() as $type) {
    $perms += view_unpublished_content_list_permissions($type);
  }
  
  return $perms;
}

function view_unpublished_content_list_permissions($type) {
  $info = node_type_get_type($type);
  $type = check_plain($info->type);
  
  $perms = array(
    "view any unpublished $type content" => array(
      'title' => t('%type_name: View any unpublished content', array('%type_name' => $info->name)),
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu_alter().
 */
function view_unpublished_content_menu_alter(&$items) {
  $items['admin/content']['page arguments'] = array('view_unpublished_content_node_admin_content');
}

/**
 * Implements hook_node_access_records().
 */
function view_unpublished_content_node_access_records($node) {
  // We only care about the node if is unpublished. If not, it is
  // treated just like any other node and we completely ignore it.
  if ($node->status == 0) {
    $grants = array();
    
    // Unpublished nodes should be viewable to all editors.
    $grants[] = array(
      'realm' => 'view_unpublished_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    
    $grants[] = array(
      'realm' => 'view_unpublished_' . $node->type . '_content',
      'gid' => 1,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    
    return $grants;
  }
}

/**
 * Implements hook_node_grants().
 */
function view_unpublished_content_node_grants($account, $op) {
  $grants = array();

  if ($op == 'view') {
    if (user_access('view any unpublished content', $account)) {
      $grants['view_unpublished_content'] = array(1);
      return $grants;
    }

    foreach(view_unpublished_content_get_configured_types() as $type) {
      if (user_access("view any unpublished $type content", $account)) {
        $grants['view_unpublished_' . $type . '_content'] = array(1);
        return $grants;
      }
    }
  }
  
  return $grants;
}

function view_unpublished_content_get_configured_types($reset = FALSE) {
  static $types = array();
  $types = (empty($types) || $reset == TRUE) ? node_permissions_get_configured_types() : $types;
  return $types;
}

/**
 * Menu callback: content administration.
 * @see node_admin_content()
 */
function view_unpublished_content_node_admin_content($form, $form_state) {
  if (isset($form_state['values']['operation']) && $form_state['values']['operation'] == 'delete') {
    return node_multiple_delete_confirm($form, $form_state, array_filter($form_state['values']['nodes']));
  }
  $form['filter'] = node_filter_form();
  $form['#submit'][] = 'node_filter_form_submit';
  $form['admin'] = view_unpublished_content_node_admin_nodes();

  return $form;
}

/**
 * Form builder: Builds the node administration overview.
 * @see node_admin_nodes()
 */
function view_unpublished_content_node_admin_nodes() {
  $admin_access = user_access('administer nodes');

  // Build the 'Update options' form.
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Update options'),
    '#attributes' => array('class' => array('container-inline')),
    '#access' => $admin_access,
  );
  $options = array();
  foreach (module_invoke_all('node_operations') as $operation => $array) {
    $options[$operation] = $array['label'];
  }
  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => $options,
    '#default_value' => 'approve',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#validate' => array('node_admin_nodes_validate'),
    '#submit' => array('node_admin_nodes_submit'),
  );

  // Enable language column if translation module is enabled or if we have any
  // node with language.
  $multilanguage = (module_exists('translation') || db_query_range("SELECT 1 FROM {node} WHERE language <> :language", 0, 1, array(':language' => LANGUAGE_NONE))->fetchField());

  // Build the sortable table header.
  $header = array(
    'title' => array('data' => t('Title'), 'field' => 'n.title'),
    'type' => array('data' => t('Type'), 'field' => 'n.type'),
    'author' => t('Author'),
    'status' => array('data' => t('Status'), 'field' => 'n.status'),
    'changed' => array('data' => t('Updated'), 'field' => 'n.changed', 'sort' => 'desc')
  );
  if ($multilanguage) {
    $header['language'] = array('data' => t('Language'), 'field' => 'n.language');
  }
  $header['operations'] = array('data' => t('Operations'));

  $query = db_select('node', 'n')->extend('PagerDefault')->extend('TableSort');
  node_build_filter_query($query);

  if (!(user_access('bypass node access') || user_access('view any unpublished content'))) {
    // If the user is able to view any unpublished nodes, allow them
    // to see these in addition to published nodes. Check that they actually
    // have some unpublished nodes to view before adding the condition.
    
    $types = array();
    foreach(view_unpublished_content_get_configured_types() as $type) {
      if (user_access("view any unpublished $type content")) {
        $types[$type] = $type;
      }
    }

    $unpublished = array();
    if (!empty($types) && $any_unpublished = db_query('SELECT nid FROM {node} WHERE status = :status AND type IN (:types)', array(':status' => 0, ':types' => $types))->fetchCol()) {
      $unpublished = array_merge($unpublished, $any_unpublished);
    }
    
    if ((user_access('view own unpublished content') && $own_unpublished = db_query('SELECT nid FROM {node} WHERE uid = :uid AND status = :status', array(':uid' => $GLOBALS['user']->uid, ':status' => 0))->fetchCol()) || !empty($unpublished)) {
      // If the user is able to view their own unpublished nodes, allow them
      // to see these in addition to published nodes. Check that they actually
      // have some unpublished nodes to view before adding the condition.
      $unpublished = array_unique(array_merge($unpublished, $own_unpublished));
      $query->condition(db_or()
        ->condition('n.status', 1)
        ->condition('n.nid', $unpublished, 'IN')
      );
    }
    else {
      // If not, restrict the query to published nodes.
      $query->condition('n.status', 1);
    }
  }
  $nids = $query
    ->fields('n',array('nid'))
    ->limit(50)
    ->orderByHeader($header)
    ->execute()
    ->fetchCol();
  $nodes = node_load_multiple($nids);

  // Prepare the list of nodes.
  $languages = language_list();
  $destination = drupal_get_destination();
  $options = array();
  foreach ($nodes as $node) {
    $l_options = $node->language != LANGUAGE_NONE && isset($languages[$node->language]) ? array('language' => $languages[$node->language]) : array();
    $options[$node->nid] = array(
      'title' => array(
        'data' => array(
          '#type' => 'link',
          '#title' => $node->title,
          '#href' => 'node/' . $node->nid,
          '#options' => $l_options,
          '#suffix' => ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))),
        ),
      ),
      'type' => check_plain(node_type_get_name($node)),
      'author' => theme('username', array('account' => $node)),
      'status' => $node->status ? t('published') : t('not published'),
      'changed' => format_date($node->changed, 'short'),
    );
    if ($multilanguage) {
      if ($node->language == LANGUAGE_NONE || isset($languages[$node->language])) {
        $options[$node->nid]['language'] = $node->language == LANGUAGE_NONE ? t('Language neutral') : t($languages[$node->language]->name);
      }
      else {
        $options[$node->nid]['language'] = t('Undefined language (@langcode)', array('@langcode' => $node->language));
      }
    }
    // Build a list of all the accessible operations for the current node.
    $operations = array();
    if (node_access('update', $node)) {
      $operations['edit'] = array(
        'title' => t('edit'),
        'href' => 'node/' . $node->nid . '/edit',
        'query' => $destination,
      );
    }
    if (node_access('delete', $node)) {
      $operations['delete'] = array(
        'title' => t('delete'),
        'href' => 'node/' . $node->nid . '/delete',
        'query' => $destination,
      );
    }
    $options[$node->nid]['operations'] = array();
    if (count($operations) > 1) {
      // Render an unordered list of operations links.
      $options[$node->nid]['operations'] = array(
        'data' => array(
          '#theme' => 'links__node_operations',
          '#links' => $operations,
          '#attributes' => array('class' => array('links', 'inline')),
        ),
      );
    }
    elseif (!empty($operations)) {
      // Render the first and only operation as a link.
      $link = reset($operations);
      $options[$node->nid]['operations'] = array(
        'data' => array(
          '#type' => 'link',
          '#title' => $link['title'],
          '#href' => $link['href'],
          '#options' => array('query' => $link['query']),
        ),
      );
    }
  }

  // Only use a tableselect when the current user is able to perform any
  // operations.
  if ($admin_access) {
    $form['nodes'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No content available.'),
    );
  }
  // Otherwise, use a simple table.
  else {
    $form['nodes'] = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $options,
      '#empty' => t('No content available.'),
    );
  }

  $form['pager'] = array('#markup' => theme('pager'));
  return $form;
}
